/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
// @ts-nocheck

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

import * as moment from 'moment';

export interface IBootClient {
    init(): Promise<BootDto>;
}

export class BootClient implements IBootClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    init(  cancelToken?: CancelToken | undefined): Promise<BootDto> {
        let url_ = this.baseUrl + "/boot";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processInit(_response);
        });
    }

    protected processInit(response: AxiosResponse): Promise<BootDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = BootDto.fromJS(resultData200);
            return Promise.resolve<BootDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BootDto>(null as any);
    }
}

export interface IChannelsClient {
    create(command: CreateChannelCommand): Promise<ChannelBriefDto>;
    list(pageNumber?: number | undefined, pageSize?: number | undefined): Promise<PaginatedListOfChannelBriefDto>;
    delete(channelId: string): Promise<FileResponse>;
    getChannelDetails(channelId: string): Promise<ChannelDetailedDto>;
    users(channelId: string, pageNumber?: number | undefined, pageSize?: number | undefined): Promise<PaginatedListOfChannelUserBriefDto>;
    addMember(command: AddUserToChannelCommand, channelId: string): Promise<ChannelUserBriefDto>;
    setAdmin(command: ChangeUserChannelAdmCommand, channelId: string, userId: string): Promise<ChannelUserBriefDto>;
    sendMessage(command: CreateMessageCommand, channelId: string): Promise<MessageProjectionDto>;
}

export class ChannelsClient implements IChannelsClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    create(command: CreateChannelCommand , cancelToken?: CancelToken | undefined): Promise<ChannelBriefDto> {
        let url_ = this.baseUrl + "/channels";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: AxiosResponse): Promise<ChannelBriefDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ChannelBriefDto.fromJS(resultData200);
            return Promise.resolve<ChannelBriefDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ChannelBriefDto>(null as any);
    }

    list(pageNumber?: number | undefined, pageSize?: number | undefined , cancelToken?: CancelToken | undefined): Promise<PaginatedListOfChannelBriefDto> {
        let url_ = this.baseUrl + "/channels?";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processList(_response);
        });
    }

    protected processList(response: AxiosResponse): Promise<PaginatedListOfChannelBriefDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PaginatedListOfChannelBriefDto.fromJS(resultData200);
            return Promise.resolve<PaginatedListOfChannelBriefDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PaginatedListOfChannelBriefDto>(null as any);
    }

    delete(channelId: string , cancelToken?: CancelToken | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/channels/{channelId}";
        if (channelId === undefined || channelId === null)
            throw new Error("The parameter 'channelId' must be defined.");
        url_ = url_.replace("{channelId}", encodeURIComponent("" + channelId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            responseType: "blob",
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: AxiosResponse): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data], { type: response.headers["content-type"] }), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    getChannelDetails(channelId: string , cancelToken?: CancelToken | undefined): Promise<ChannelDetailedDto> {
        let url_ = this.baseUrl + "/channels/{channelId}";
        if (channelId === undefined || channelId === null)
            throw new Error("The parameter 'channelId' must be defined.");
        url_ = url_.replace("{channelId}", encodeURIComponent("" + channelId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetChannelDetails(_response);
        });
    }

    protected processGetChannelDetails(response: AxiosResponse): Promise<ChannelDetailedDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ChannelDetailedDto.fromJS(resultData200);
            return Promise.resolve<ChannelDetailedDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ChannelDetailedDto>(null as any);
    }

    users(channelId: string, pageNumber?: number | undefined, pageSize?: number | undefined , cancelToken?: CancelToken | undefined): Promise<PaginatedListOfChannelUserBriefDto> {
        let url_ = this.baseUrl + "/channels/{channelId}/users?";
        if (channelId === undefined || channelId === null)
            throw new Error("The parameter 'channelId' must be defined.");
        url_ = url_.replace("{channelId}", encodeURIComponent("" + channelId));
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUsers(_response);
        });
    }

    protected processUsers(response: AxiosResponse): Promise<PaginatedListOfChannelUserBriefDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PaginatedListOfChannelUserBriefDto.fromJS(resultData200);
            return Promise.resolve<PaginatedListOfChannelUserBriefDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PaginatedListOfChannelUserBriefDto>(null as any);
    }

    addMember(command: AddUserToChannelCommand, channelId: string , cancelToken?: CancelToken | undefined): Promise<ChannelUserBriefDto> {
        let url_ = this.baseUrl + "/channels/{channelId}/users";
        if (channelId === undefined || channelId === null)
            throw new Error("The parameter 'channelId' must be defined.");
        url_ = url_.replace("{channelId}", encodeURIComponent("" + channelId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAddMember(_response);
        });
    }

    protected processAddMember(response: AxiosResponse): Promise<ChannelUserBriefDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ChannelUserBriefDto.fromJS(resultData200);
            return Promise.resolve<ChannelUserBriefDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ChannelUserBriefDto>(null as any);
    }

    setAdmin(command: ChangeUserChannelAdmCommand, channelId: string, userId: string , cancelToken?: CancelToken | undefined): Promise<ChannelUserBriefDto> {
        let url_ = this.baseUrl + "/channels/{channelId}/users/{userId}/admin";
        if (channelId === undefined || channelId === null)
            throw new Error("The parameter 'channelId' must be defined.");
        url_ = url_.replace("{channelId}", encodeURIComponent("" + channelId));
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSetAdmin(_response);
        });
    }

    protected processSetAdmin(response: AxiosResponse): Promise<ChannelUserBriefDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ChannelUserBriefDto.fromJS(resultData200);
            return Promise.resolve<ChannelUserBriefDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ChannelUserBriefDto>(null as any);
    }

    sendMessage(command: CreateMessageCommand, channelId: string , cancelToken?: CancelToken | undefined): Promise<MessageProjectionDto> {
        let url_ = this.baseUrl + "/channels/{channelId}/messages";
        if (channelId === undefined || channelId === null)
            throw new Error("The parameter 'channelId' must be defined.");
        url_ = url_.replace("{channelId}", encodeURIComponent("" + channelId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSendMessage(_response);
        });
    }

    protected processSendMessage(response: AxiosResponse): Promise<MessageProjectionDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MessageProjectionDto.fromJS(resultData200);
            return Promise.resolve<MessageProjectionDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MessageProjectionDto>(null as any);
    }
}

export interface IHookClient {
    kratosRegistrationHook(kratosUser: User): Promise<FileResponse>;
}

export class HookClient implements IHookClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    kratosRegistrationHook(kratosUser: User , cancelToken?: CancelToken | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/hook/kratos/registration";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(kratosUser);

        let options_: AxiosRequestConfig = {
            data: content_,
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processKratosRegistrationHook(_response);
        });
    }

    protected processKratosRegistrationHook(response: AxiosResponse): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data], { type: response.headers["content-type"] }), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(null as any);
    }
}

export interface INotificationsClient {
    list(user_Id?: string | undefined, user_Username?: string | null | undefined, user_Firstname?: string | null | undefined, user_Lastname?: string | null | undefined, pageNumber?: number | undefined, pageSize?: number | undefined): Promise<PaginatedListOfNotificationDto>;
}

export class NotificationsClient implements INotificationsClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    list(user_Id?: string | undefined, user_Username?: string | null | undefined, user_Firstname?: string | null | undefined, user_Lastname?: string | null | undefined, pageNumber?: number | undefined, pageSize?: number | undefined , cancelToken?: CancelToken | undefined): Promise<PaginatedListOfNotificationDto> {
        let url_ = this.baseUrl + "/notifications?";
        if (user_Id === null)
            throw new Error("The parameter 'user_Id' cannot be null.");
        else if (user_Id !== undefined)
            url_ += "User.Id=" + encodeURIComponent("" + user_Id) + "&";
        if (user_Username !== undefined && user_Username !== null)
            url_ += "User.Username=" + encodeURIComponent("" + user_Username) + "&";
        if (user_Firstname !== undefined && user_Firstname !== null)
            url_ += "User.Firstname=" + encodeURIComponent("" + user_Firstname) + "&";
        if (user_Lastname !== undefined && user_Lastname !== null)
            url_ += "User.Lastname=" + encodeURIComponent("" + user_Lastname) + "&";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processList(_response);
        });
    }

    protected processList(response: AxiosResponse): Promise<PaginatedListOfNotificationDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PaginatedListOfNotificationDto.fromJS(resultData200);
            return Promise.resolve<PaginatedListOfNotificationDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PaginatedListOfNotificationDto>(null as any);
    }
}

export interface IUsersClient {
    query(q?: string | null | undefined, workspaceScoped?: boolean | undefined, user_Id?: string | undefined, user_Username?: string | null | undefined, user_Firstname?: string | null | undefined, user_Lastname?: string | null | undefined, pageNumber?: number | undefined, pageSize?: number | undefined): Promise<PaginatedListOfUserBriefDto>;
}

export class UsersClient implements IUsersClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    query(q?: string | null | undefined, workspaceScoped?: boolean | undefined, user_Id?: string | undefined, user_Username?: string | null | undefined, user_Firstname?: string | null | undefined, user_Lastname?: string | null | undefined, pageNumber?: number | undefined, pageSize?: number | undefined , cancelToken?: CancelToken | undefined): Promise<PaginatedListOfUserBriefDto> {
        let url_ = this.baseUrl + "/users/search?";
        if (q !== undefined && q !== null)
            url_ += "Q=" + encodeURIComponent("" + q) + "&";
        if (workspaceScoped === null)
            throw new Error("The parameter 'workspaceScoped' cannot be null.");
        else if (workspaceScoped !== undefined)
            url_ += "WorkspaceScoped=" + encodeURIComponent("" + workspaceScoped) + "&";
        if (user_Id === null)
            throw new Error("The parameter 'user_Id' cannot be null.");
        else if (user_Id !== undefined)
            url_ += "User.Id=" + encodeURIComponent("" + user_Id) + "&";
        if (user_Username !== undefined && user_Username !== null)
            url_ += "User.Username=" + encodeURIComponent("" + user_Username) + "&";
        if (user_Firstname !== undefined && user_Firstname !== null)
            url_ += "User.Firstname=" + encodeURIComponent("" + user_Firstname) + "&";
        if (user_Lastname !== undefined && user_Lastname !== null)
            url_ += "User.Lastname=" + encodeURIComponent("" + user_Lastname) + "&";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processQuery(_response);
        });
    }

    protected processQuery(response: AxiosResponse): Promise<PaginatedListOfUserBriefDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PaginatedListOfUserBriefDto.fromJS(resultData200);
            return Promise.resolve<PaginatedListOfUserBriefDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PaginatedListOfUserBriefDto>(null as any);
    }
}

export interface IWorkspacesClient {
    list(pageNumber?: number | undefined, pageSize?: number | undefined): Promise<PaginatedListOfWorkspaceBriefDto>;
    create(command: CreateWorkspaceCommand): Promise<WorkspaceBriefDto>;
    invite(command: InviteToWorkspaceCommand): Promise<FileResponse>;
    acceptInvite(command: AcceptWorkspaceInviteCommand): Promise<WorkspaceBriefDto>;
    banish(command: BanishUserFromWorkspaceCommand): Promise<FileResponse>;
    rejectInvite(command: RejectWorkspaceInviteCommand): Promise<FileResponse>;
}

export class WorkspacesClient implements IWorkspacesClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    list(pageNumber?: number | undefined, pageSize?: number | undefined , cancelToken?: CancelToken | undefined): Promise<PaginatedListOfWorkspaceBriefDto> {
        let url_ = this.baseUrl + "/workspaces?";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processList(_response);
        });
    }

    protected processList(response: AxiosResponse): Promise<PaginatedListOfWorkspaceBriefDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PaginatedListOfWorkspaceBriefDto.fromJS(resultData200);
            return Promise.resolve<PaginatedListOfWorkspaceBriefDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PaginatedListOfWorkspaceBriefDto>(null as any);
    }

    create(command: CreateWorkspaceCommand , cancelToken?: CancelToken | undefined): Promise<WorkspaceBriefDto> {
        let url_ = this.baseUrl + "/workspaces";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: AxiosResponse): Promise<WorkspaceBriefDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = WorkspaceBriefDto.fromJS(resultData200);
            return Promise.resolve<WorkspaceBriefDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<WorkspaceBriefDto>(null as any);
    }

    invite(command: InviteToWorkspaceCommand , cancelToken?: CancelToken | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/workspaces/invite";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: AxiosRequestConfig = {
            data: content_,
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processInvite(_response);
        });
    }

    protected processInvite(response: AxiosResponse): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data], { type: response.headers["content-type"] }), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    acceptInvite(command: AcceptWorkspaceInviteCommand , cancelToken?: CancelToken | undefined): Promise<WorkspaceBriefDto> {
        let url_ = this.baseUrl + "/workspaces/accept-invite";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAcceptInvite(_response);
        });
    }

    protected processAcceptInvite(response: AxiosResponse): Promise<WorkspaceBriefDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = WorkspaceBriefDto.fromJS(resultData200);
            return Promise.resolve<WorkspaceBriefDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<WorkspaceBriefDto>(null as any);
    }

    banish(command: BanishUserFromWorkspaceCommand , cancelToken?: CancelToken | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/workspaces/banish";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: AxiosRequestConfig = {
            data: content_,
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processBanish(_response);
        });
    }

    protected processBanish(response: AxiosResponse): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data], { type: response.headers["content-type"] }), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    rejectInvite(command: RejectWorkspaceInviteCommand , cancelToken?: CancelToken | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/workspaces/reject-invite";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: AxiosRequestConfig = {
            data: content_,
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRejectInvite(_response);
        });
    }

    protected processRejectInvite(response: AxiosResponse): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data], { type: response.headers["content-type"] }), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(null as any);
    }
}

export class BootDto implements IBootDto {
    messagePriorities?: IdNameDto[];
    messageReactions?: IdNameDto[];
    messageTypes?: IdNameDto[];
    channels?: ChannelBriefDto[];
    users?: UserBriefDto[];
    me?: UserBriefDto;
    permissions?: any[];

    constructor(data?: IBootDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["messagePriorities"])) {
                this.messagePriorities = [] as any;
                for (let item of _data["messagePriorities"])
                    this.messagePriorities!.push(IdNameDto.fromJS(item));
            }
            if (Array.isArray(_data["messageReactions"])) {
                this.messageReactions = [] as any;
                for (let item of _data["messageReactions"])
                    this.messageReactions!.push(IdNameDto.fromJS(item));
            }
            if (Array.isArray(_data["messageTypes"])) {
                this.messageTypes = [] as any;
                for (let item of _data["messageTypes"])
                    this.messageTypes!.push(IdNameDto.fromJS(item));
            }
            if (Array.isArray(_data["channels"])) {
                this.channels = [] as any;
                for (let item of _data["channels"])
                    this.channels!.push(ChannelBriefDto.fromJS(item));
            }
            if (Array.isArray(_data["users"])) {
                this.users = [] as any;
                for (let item of _data["users"])
                    this.users!.push(UserBriefDto.fromJS(item));
            }
            this.me = _data["me"] ? UserBriefDto.fromJS(_data["me"]) : <any>undefined;
            if (Array.isArray(_data["permissions"])) {
                this.permissions = [] as any;
                for (let item of _data["permissions"])
                    this.permissions!.push(item);
            }
        }
    }

    static fromJS(data: any): BootDto {
        data = typeof data === 'object' ? data : {};
        let result = new BootDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.messagePriorities)) {
            data["messagePriorities"] = [];
            for (let item of this.messagePriorities)
                data["messagePriorities"].push(item.toJSON());
        }
        if (Array.isArray(this.messageReactions)) {
            data["messageReactions"] = [];
            for (let item of this.messageReactions)
                data["messageReactions"].push(item.toJSON());
        }
        if (Array.isArray(this.messageTypes)) {
            data["messageTypes"] = [];
            for (let item of this.messageTypes)
                data["messageTypes"].push(item.toJSON());
        }
        if (Array.isArray(this.channels)) {
            data["channels"] = [];
            for (let item of this.channels)
                data["channels"].push(item.toJSON());
        }
        if (Array.isArray(this.users)) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item.toJSON());
        }
        data["me"] = this.me ? this.me.toJSON() : <any>undefined;
        if (Array.isArray(this.permissions)) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item);
        }
        return data;
    }
}

export interface IBootDto {
    messagePriorities?: IdNameDto[];
    messageReactions?: IdNameDto[];
    messageTypes?: IdNameDto[];
    channels?: ChannelBriefDto[];
    users?: UserBriefDto[];
    me?: UserBriefDto;
    permissions?: any[];
}

export class IdNameDto implements IIdNameDto {
    id?: string;
    name?: string;

    constructor(data?: IIdNameDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): IdNameDto {
        data = typeof data === 'object' ? data : {};
        let result = new IdNameDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IIdNameDto {
    id?: string;
    name?: string;
}

export class ChannelBriefDto implements IChannelBriefDto {
    id?: string;
    name?: string;

    constructor(data?: IChannelBriefDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): ChannelBriefDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChannelBriefDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IChannelBriefDto {
    id?: string;
    name?: string;
}

export class UserBriefDto implements IUserBriefDto {
    id?: string;
    username?: string;
    name?: string;

    constructor(data?: IUserBriefDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.username = _data["username"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): UserBriefDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserBriefDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["username"] = this.username;
        data["name"] = this.name;
        return data;
    }
}

export interface IUserBriefDto {
    id?: string;
    username?: string;
    name?: string;
}

export class BaseRequestOfChannelBriefDto implements IBaseRequestOfChannelBriefDto {
    user?: IUser;

    constructor(data?: IBaseRequestOfChannelBriefDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.user = _data["user"] ? IUser.fromJS(_data["user"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BaseRequestOfChannelBriefDto {
        data = typeof data === 'object' ? data : {};
        let result = new BaseRequestOfChannelBriefDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        return data;
    }
}

export interface IBaseRequestOfChannelBriefDto {
    user?: IUser;
}

export class WorkspaceScopedRequestOfChannelBriefDto extends BaseRequestOfChannelBriefDto implements IWorkspaceScopedRequestOfChannelBriefDto {
    workspaceId?: string;

    constructor(data?: IWorkspaceScopedRequestOfChannelBriefDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.workspaceId = _data["workspaceId"];
        }
    }

    static fromJS(data: any): WorkspaceScopedRequestOfChannelBriefDto {
        data = typeof data === 'object' ? data : {};
        let result = new WorkspaceScopedRequestOfChannelBriefDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["workspaceId"] = this.workspaceId;
        super.toJSON(data);
        return data;
    }
}

export interface IWorkspaceScopedRequestOfChannelBriefDto extends IBaseRequestOfChannelBriefDto {
    workspaceId?: string;
}

export class CreateChannelCommand extends WorkspaceScopedRequestOfChannelBriefDto implements ICreateChannelCommand {
    name?: string;
    isPrivate?: boolean;

    constructor(data?: ICreateChannelCommand) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.name = _data["name"];
            this.isPrivate = _data["isPrivate"];
        }
    }

    static fromJS(data: any): CreateChannelCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateChannelCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["isPrivate"] = this.isPrivate;
        super.toJSON(data);
        return data;
    }
}

export interface ICreateChannelCommand extends IWorkspaceScopedRequestOfChannelBriefDto {
    name?: string;
    isPrivate?: boolean;
}

export abstract class IUser implements IIUser {
    id?: string;
    username?: string;
    firstname?: string;
    lastname?: string;

    constructor(data?: IIUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.username = _data["username"];
            this.firstname = _data["firstname"];
            this.lastname = _data["lastname"];
        }
    }

    static fromJS(data: any): IUser {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'IUser' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["username"] = this.username;
        data["firstname"] = this.firstname;
        data["lastname"] = this.lastname;
        return data;
    }
}

export interface IIUser {
    id?: string;
    username?: string;
    firstname?: string;
    lastname?: string;
}

export class PaginatedListOfChannelBriefDto implements IPaginatedListOfChannelBriefDto {
    items?: ChannelBriefDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfChannelBriefDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ChannelBriefDto.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfChannelBriefDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfChannelBriefDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfChannelBriefDto {
    items?: ChannelBriefDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class ChannelDetailedDto implements IChannelDetailedDto {
    channel?: ChannelBriefDto;
    members?: UserBriefDto[];
    messages?: MessageProjectionDto[];

    constructor(data?: IChannelDetailedDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.channel = _data["channel"] ? ChannelBriefDto.fromJS(_data["channel"]) : <any>undefined;
            if (Array.isArray(_data["members"])) {
                this.members = [] as any;
                for (let item of _data["members"])
                    this.members!.push(UserBriefDto.fromJS(item));
            }
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(MessageProjectionDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ChannelDetailedDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChannelDetailedDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["channel"] = this.channel ? this.channel.toJSON() : <any>undefined;
        if (Array.isArray(this.members)) {
            data["members"] = [];
            for (let item of this.members)
                data["members"].push(item.toJSON());
        }
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IChannelDetailedDto {
    channel?: ChannelBriefDto;
    members?: UserBriefDto[];
    messages?: MessageProjectionDto[];
}

export class MessageProjectionDto implements IMessageProjectionDto {
    id?: string;
    messageId?: string;
    recipientId?: string;
    senderId?: string;
    channelId?: string;
    senderName?: string;
    isInbound?: boolean;
    body?: string;
    meta?: string;
    reactions?: string;
    createdAt?: moment.Moment;
    receivedAt?: moment.Moment | undefined;
    readAt?: moment.Moment | undefined;
    confirmedVisualizationAt?: moment.Moment | undefined;
    replyingTo?: MessageProjectionDto | undefined;
    forwardedBy?: UserBriefDto;
    priority?: IdNameDto;
    bodyType?: IdNameDto;

    constructor(data?: IMessageProjectionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.messageId = _data["messageId"];
            this.recipientId = _data["recipientId"];
            this.senderId = _data["senderId"];
            this.channelId = _data["channelId"];
            this.senderName = _data["senderName"];
            this.isInbound = _data["isInbound"];
            this.body = _data["body"];
            this.meta = _data["meta"];
            this.reactions = _data["reactions"];
            this.createdAt = _data["createdAt"] ? moment(_data["createdAt"].toString()) : <any>undefined;
            this.receivedAt = _data["receivedAt"] ? moment(_data["receivedAt"].toString()) : <any>undefined;
            this.readAt = _data["readAt"] ? moment(_data["readAt"].toString()) : <any>undefined;
            this.confirmedVisualizationAt = _data["confirmedVisualizationAt"] ? moment(_data["confirmedVisualizationAt"].toString()) : <any>undefined;
            this.replyingTo = _data["replyingTo"] ? MessageProjectionDto.fromJS(_data["replyingTo"]) : <any>undefined;
            this.forwardedBy = _data["forwardedBy"] ? UserBriefDto.fromJS(_data["forwardedBy"]) : <any>undefined;
            this.priority = _data["priority"] ? IdNameDto.fromJS(_data["priority"]) : <any>undefined;
            this.bodyType = _data["bodyType"] ? IdNameDto.fromJS(_data["bodyType"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MessageProjectionDto {
        data = typeof data === 'object' ? data : {};
        let result = new MessageProjectionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["messageId"] = this.messageId;
        data["recipientId"] = this.recipientId;
        data["senderId"] = this.senderId;
        data["channelId"] = this.channelId;
        data["senderName"] = this.senderName;
        data["isInbound"] = this.isInbound;
        data["body"] = this.body;
        data["meta"] = this.meta;
        data["reactions"] = this.reactions;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["receivedAt"] = this.receivedAt ? this.receivedAt.toISOString() : <any>undefined;
        data["readAt"] = this.readAt ? this.readAt.toISOString() : <any>undefined;
        data["confirmedVisualizationAt"] = this.confirmedVisualizationAt ? this.confirmedVisualizationAt.toISOString() : <any>undefined;
        data["replyingTo"] = this.replyingTo ? this.replyingTo.toJSON() : <any>undefined;
        data["forwardedBy"] = this.forwardedBy ? this.forwardedBy.toJSON() : <any>undefined;
        data["priority"] = this.priority ? this.priority.toJSON() : <any>undefined;
        data["bodyType"] = this.bodyType ? this.bodyType.toJSON() : <any>undefined;
        return data;
    }
}

export interface IMessageProjectionDto {
    id?: string;
    messageId?: string;
    recipientId?: string;
    senderId?: string;
    channelId?: string;
    senderName?: string;
    isInbound?: boolean;
    body?: string;
    meta?: string;
    reactions?: string;
    createdAt?: moment.Moment;
    receivedAt?: moment.Moment | undefined;
    readAt?: moment.Moment | undefined;
    confirmedVisualizationAt?: moment.Moment | undefined;
    replyingTo?: MessageProjectionDto | undefined;
    forwardedBy?: UserBriefDto;
    priority?: IdNameDto;
    bodyType?: IdNameDto;
}

export class PaginatedListOfChannelUserBriefDto implements IPaginatedListOfChannelUserBriefDto {
    items?: ChannelUserBriefDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfChannelUserBriefDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ChannelUserBriefDto.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfChannelUserBriefDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfChannelUserBriefDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfChannelUserBriefDto {
    items?: ChannelUserBriefDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class ChannelUserBriefDto implements IChannelUserBriefDto {
    id?: string;
    userId?: string;
    channelId?: string;

    constructor(data?: IChannelUserBriefDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.channelId = _data["channelId"];
        }
    }

    static fromJS(data: any): ChannelUserBriefDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChannelUserBriefDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["channelId"] = this.channelId;
        return data;
    }
}

export interface IChannelUserBriefDto {
    id?: string;
    userId?: string;
    channelId?: string;
}

export class BaseRequestOfChannelUserBriefDto implements IBaseRequestOfChannelUserBriefDto {
    user?: IUser;

    constructor(data?: IBaseRequestOfChannelUserBriefDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.user = _data["user"] ? IUser.fromJS(_data["user"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BaseRequestOfChannelUserBriefDto {
        data = typeof data === 'object' ? data : {};
        let result = new BaseRequestOfChannelUserBriefDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        return data;
    }
}

export interface IBaseRequestOfChannelUserBriefDto {
    user?: IUser;
}

export class WorkspaceScopedRequestOfChannelUserBriefDto extends BaseRequestOfChannelUserBriefDto implements IWorkspaceScopedRequestOfChannelUserBriefDto {
    workspaceId?: string;

    constructor(data?: IWorkspaceScopedRequestOfChannelUserBriefDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.workspaceId = _data["workspaceId"];
        }
    }

    static fromJS(data: any): WorkspaceScopedRequestOfChannelUserBriefDto {
        data = typeof data === 'object' ? data : {};
        let result = new WorkspaceScopedRequestOfChannelUserBriefDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["workspaceId"] = this.workspaceId;
        super.toJSON(data);
        return data;
    }
}

export interface IWorkspaceScopedRequestOfChannelUserBriefDto extends IBaseRequestOfChannelUserBriefDto {
    workspaceId?: string;
}

export class ChannelScopedRequestOfChannelUserBriefDto extends WorkspaceScopedRequestOfChannelUserBriefDto implements IChannelScopedRequestOfChannelUserBriefDto {
    channelId?: string;

    constructor(data?: IChannelScopedRequestOfChannelUserBriefDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.channelId = _data["channelId"];
        }
    }

    static fromJS(data: any): ChannelScopedRequestOfChannelUserBriefDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChannelScopedRequestOfChannelUserBriefDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["channelId"] = this.channelId;
        super.toJSON(data);
        return data;
    }
}

export interface IChannelScopedRequestOfChannelUserBriefDto extends IWorkspaceScopedRequestOfChannelUserBriefDto {
    channelId?: string;
}

export class AddUserToChannelCommand extends ChannelScopedRequestOfChannelUserBriefDto implements IAddUserToChannelCommand {
    userId?: string;

    constructor(data?: IAddUserToChannelCommand) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): AddUserToChannelCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AddUserToChannelCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        super.toJSON(data);
        return data;
    }
}

export interface IAddUserToChannelCommand extends IChannelScopedRequestOfChannelUserBriefDto {
    userId?: string;
}

export class ChangeUserChannelAdmCommand extends WorkspaceScopedRequestOfChannelUserBriefDto implements IChangeUserChannelAdmCommand {
    channelId?: string;
    userId?: string;
    admin?: boolean;

    constructor(data?: IChangeUserChannelAdmCommand) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.channelId = _data["channelId"];
            this.userId = _data["userId"];
            this.admin = _data["admin"];
        }
    }

    static fromJS(data: any): ChangeUserChannelAdmCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ChangeUserChannelAdmCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["channelId"] = this.channelId;
        data["userId"] = this.userId;
        data["admin"] = this.admin;
        super.toJSON(data);
        return data;
    }
}

export interface IChangeUserChannelAdmCommand extends IWorkspaceScopedRequestOfChannelUserBriefDto {
    channelId?: string;
    userId?: string;
    admin?: boolean;
}

export class BaseRequestOfMessageProjectionDto implements IBaseRequestOfMessageProjectionDto {
    user?: IUser;

    constructor(data?: IBaseRequestOfMessageProjectionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.user = _data["user"] ? IUser.fromJS(_data["user"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BaseRequestOfMessageProjectionDto {
        data = typeof data === 'object' ? data : {};
        let result = new BaseRequestOfMessageProjectionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        return data;
    }
}

export interface IBaseRequestOfMessageProjectionDto {
    user?: IUser;
}

export class WorkspaceScopedRequestOfMessageProjectionDto extends BaseRequestOfMessageProjectionDto implements IWorkspaceScopedRequestOfMessageProjectionDto {
    workspaceId?: string;

    constructor(data?: IWorkspaceScopedRequestOfMessageProjectionDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.workspaceId = _data["workspaceId"];
        }
    }

    static fromJS(data: any): WorkspaceScopedRequestOfMessageProjectionDto {
        data = typeof data === 'object' ? data : {};
        let result = new WorkspaceScopedRequestOfMessageProjectionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["workspaceId"] = this.workspaceId;
        super.toJSON(data);
        return data;
    }
}

export interface IWorkspaceScopedRequestOfMessageProjectionDto extends IBaseRequestOfMessageProjectionDto {
    workspaceId?: string;
}

export class ChannelScopedRequestOfMessageProjectionDto extends WorkspaceScopedRequestOfMessageProjectionDto implements IChannelScopedRequestOfMessageProjectionDto {
    channelId?: string;

    constructor(data?: IChannelScopedRequestOfMessageProjectionDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.channelId = _data["channelId"];
        }
    }

    static fromJS(data: any): ChannelScopedRequestOfMessageProjectionDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChannelScopedRequestOfMessageProjectionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["channelId"] = this.channelId;
        super.toJSON(data);
        return data;
    }
}

export interface IChannelScopedRequestOfMessageProjectionDto extends IWorkspaceScopedRequestOfMessageProjectionDto {
    channelId?: string;
}

export class CreateMessageCommand extends ChannelScopedRequestOfMessageProjectionDto implements ICreateMessageCommand {
    body?: string;
    bodyType?: string;
    priority?: string;
    meta?: string;
    expirationDate?: moment.Moment | undefined;

    constructor(data?: ICreateMessageCommand) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.body = _data["body"];
            this.bodyType = _data["bodyType"];
            this.priority = _data["priority"];
            this.meta = _data["meta"];
            this.expirationDate = _data["expirationDate"] ? moment(_data["expirationDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateMessageCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateMessageCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["body"] = this.body;
        data["bodyType"] = this.bodyType;
        data["priority"] = this.priority;
        data["meta"] = this.meta;
        data["expirationDate"] = this.expirationDate ? this.expirationDate.toISOString() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface ICreateMessageCommand extends IChannelScopedRequestOfMessageProjectionDto {
    body?: string;
    bodyType?: string;
    priority?: string;
    meta?: string;
    expirationDate?: moment.Moment | undefined;
}

export class User implements IUser {
    id?: string;
    username?: string;
    firstname?: string;
    lastname?: string;

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.username = _data["username"];
            this.firstname = _data["firstname"];
            this.lastname = _data["lastname"];
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["username"] = this.username;
        data["firstname"] = this.firstname;
        data["lastname"] = this.lastname;
        return data;
    }
}

export interface IUser {
    id?: string;
    username?: string;
    firstname?: string;
    lastname?: string;
}

export class PaginatedListOfNotificationDto implements IPaginatedListOfNotificationDto {
    items?: NotificationDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfNotificationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(NotificationDto.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfNotificationDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfNotificationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfNotificationDto {
    items?: NotificationDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class NotificationDto implements INotificationDto {
    id?: string;
    workspaceId?: string | undefined;
    createdBy?: string;
    meta?: string;
    type?: NotificationType;
    createdAt?: moment.Moment;

    constructor(data?: INotificationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.workspaceId = _data["workspaceId"];
            this.createdBy = _data["createdBy"];
            this.meta = _data["meta"];
            this.type = _data["type"];
            this.createdAt = _data["createdAt"] ? moment(_data["createdAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): NotificationDto {
        data = typeof data === 'object' ? data : {};
        let result = new NotificationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["workspaceId"] = this.workspaceId;
        data["createdBy"] = this.createdBy;
        data["meta"] = this.meta;
        data["type"] = this.type;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        return data;
    }
}

export interface INotificationDto {
    id?: string;
    workspaceId?: string | undefined;
    createdBy?: string;
    meta?: string;
    type?: NotificationType;
    createdAt?: moment.Moment;
}

export enum NotificationType {
    WorkspaceInvitation = 0,
    UserJoinedWorkspace = 1,
    UserJoinedChannel = 2,
}

export class PaginatedListOfUserBriefDto implements IPaginatedListOfUserBriefDto {
    items?: UserBriefDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfUserBriefDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(UserBriefDto.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfUserBriefDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfUserBriefDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfUserBriefDto {
    items?: UserBriefDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class PaginatedListOfWorkspaceBriefDto implements IPaginatedListOfWorkspaceBriefDto {
    items?: WorkspaceBriefDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfWorkspaceBriefDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(WorkspaceBriefDto.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfWorkspaceBriefDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfWorkspaceBriefDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfWorkspaceBriefDto {
    items?: WorkspaceBriefDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class WorkspaceBriefDto implements IWorkspaceBriefDto {
    id?: string;
    name?: string;
    joined?: boolean;

    constructor(data?: IWorkspaceBriefDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.joined = _data["joined"];
        }
    }

    static fromJS(data: any): WorkspaceBriefDto {
        data = typeof data === 'object' ? data : {};
        let result = new WorkspaceBriefDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["joined"] = this.joined;
        return data;
    }
}

export interface IWorkspaceBriefDto {
    id?: string;
    name?: string;
    joined?: boolean;
}

export class CreateWorkspaceCommand implements ICreateWorkspaceCommand {
    name?: string;

    constructor(data?: ICreateWorkspaceCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): CreateWorkspaceCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateWorkspaceCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }
}

export interface ICreateWorkspaceCommand {
    name?: string;
}

export class BaseRequestOfUnit implements IBaseRequestOfUnit {
    user?: IUser;

    constructor(data?: IBaseRequestOfUnit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.user = _data["user"] ? IUser.fromJS(_data["user"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BaseRequestOfUnit {
        data = typeof data === 'object' ? data : {};
        let result = new BaseRequestOfUnit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        return data;
    }
}

export interface IBaseRequestOfUnit {
    user?: IUser;
}

export class WorkspaceScopedRequestOfUnit extends BaseRequestOfUnit implements IWorkspaceScopedRequestOfUnit {
    workspaceId?: string;

    constructor(data?: IWorkspaceScopedRequestOfUnit) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.workspaceId = _data["workspaceId"];
        }
    }

    static fromJS(data: any): WorkspaceScopedRequestOfUnit {
        data = typeof data === 'object' ? data : {};
        let result = new WorkspaceScopedRequestOfUnit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["workspaceId"] = this.workspaceId;
        super.toJSON(data);
        return data;
    }
}

export interface IWorkspaceScopedRequestOfUnit extends IBaseRequestOfUnit {
    workspaceId?: string;
}

export class InviteToWorkspaceCommand extends WorkspaceScopedRequestOfUnit implements IInviteToWorkspaceCommand {
    userId?: string;

    constructor(data?: IInviteToWorkspaceCommand) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): InviteToWorkspaceCommand {
        data = typeof data === 'object' ? data : {};
        let result = new InviteToWorkspaceCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        super.toJSON(data);
        return data;
    }
}

export interface IInviteToWorkspaceCommand extends IWorkspaceScopedRequestOfUnit {
    userId?: string;
}

export class BaseRequestOfWorkspaceBriefDto implements IBaseRequestOfWorkspaceBriefDto {
    user?: IUser;

    constructor(data?: IBaseRequestOfWorkspaceBriefDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.user = _data["user"] ? IUser.fromJS(_data["user"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BaseRequestOfWorkspaceBriefDto {
        data = typeof data === 'object' ? data : {};
        let result = new BaseRequestOfWorkspaceBriefDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        return data;
    }
}

export interface IBaseRequestOfWorkspaceBriefDto {
    user?: IUser;
}

export class AcceptWorkspaceInviteCommand extends BaseRequestOfWorkspaceBriefDto implements IAcceptWorkspaceInviteCommand {
    invitationId?: string;

    constructor(data?: IAcceptWorkspaceInviteCommand) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.invitationId = _data["invitationId"];
        }
    }

    static fromJS(data: any): AcceptWorkspaceInviteCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AcceptWorkspaceInviteCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["invitationId"] = this.invitationId;
        super.toJSON(data);
        return data;
    }
}

export interface IAcceptWorkspaceInviteCommand extends IBaseRequestOfWorkspaceBriefDto {
    invitationId?: string;
}

export class BanishUserFromWorkspaceCommand extends WorkspaceScopedRequestOfUnit implements IBanishUserFromWorkspaceCommand {
    userId?: string;
    reason?: string;

    constructor(data?: IBanishUserFromWorkspaceCommand) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.userId = _data["userId"];
            this.reason = _data["reason"];
        }
    }

    static fromJS(data: any): BanishUserFromWorkspaceCommand {
        data = typeof data === 'object' ? data : {};
        let result = new BanishUserFromWorkspaceCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["reason"] = this.reason;
        super.toJSON(data);
        return data;
    }
}

export interface IBanishUserFromWorkspaceCommand extends IWorkspaceScopedRequestOfUnit {
    userId?: string;
    reason?: string;
}

export class RejectWorkspaceInviteCommand extends BaseRequestOfUnit implements IRejectWorkspaceInviteCommand {
    invitationId?: string;

    constructor(data?: IRejectWorkspaceInviteCommand) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.invitationId = _data["invitationId"];
        }
    }

    static fromJS(data: any): RejectWorkspaceInviteCommand {
        data = typeof data === 'object' ? data : {};
        let result = new RejectWorkspaceInviteCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["invitationId"] = this.invitationId;
        super.toJSON(data);
        return data;
    }
}

export interface IRejectWorkspaceInviteCommand extends IBaseRequestOfUnit {
    invitationId?: string;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}