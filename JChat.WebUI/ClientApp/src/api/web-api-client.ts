/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

import * as moment from 'moment';

export interface IBootClient {
    init(): Promise<BootDto>;
}

export class BootClient implements IBootClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    init(  cancelToken?: CancelToken | undefined): Promise<BootDto> {
        let url_ = this.baseUrl + "/boot";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processInit(_response);
        });
    }

    protected processInit(response: AxiosResponse): Promise<BootDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = BootDto.fromJS(resultData200);
            return Promise.resolve<BootDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BootDto>(<any>null);
    }
}

export interface IChannelsClient {
    create(command: CreateChannelCommand): Promise<ChannelBriefDto>;
    list(pageNumber?: number | undefined, pageSize?: number | undefined): Promise<PaginatedListOfChannelBriefDto>;
    users(channelId: string, pageNumber?: number | undefined, pageSize?: number | undefined): Promise<PaginatedListOfChannelUserBriefDto>;
    addMember(command: AddUserToChannelCommand, channelId: string): Promise<ChannelUserBriefDto>;
    sendMessage(command: CreateMessageCommand, channelId: string): Promise<MessageBriefDto>;
}

export class ChannelsClient implements IChannelsClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    create(command: CreateChannelCommand , cancelToken?: CancelToken | undefined): Promise<ChannelBriefDto> {
        let url_ = this.baseUrl + "/channels";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: AxiosResponse): Promise<ChannelBriefDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ChannelBriefDto.fromJS(resultData200);
            return Promise.resolve<ChannelBriefDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ChannelBriefDto>(<any>null);
    }

    list(pageNumber?: number | undefined, pageSize?: number | undefined , cancelToken?: CancelToken | undefined): Promise<PaginatedListOfChannelBriefDto> {
        let url_ = this.baseUrl + "/channels?";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processList(_response);
        });
    }

    protected processList(response: AxiosResponse): Promise<PaginatedListOfChannelBriefDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PaginatedListOfChannelBriefDto.fromJS(resultData200);
            return Promise.resolve<PaginatedListOfChannelBriefDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PaginatedListOfChannelBriefDto>(<any>null);
    }

    users(channelId: string, pageNumber?: number | undefined, pageSize?: number | undefined , cancelToken?: CancelToken | undefined): Promise<PaginatedListOfChannelUserBriefDto> {
        let url_ = this.baseUrl + "/channels/{channelId}/users?";
        if (channelId === undefined || channelId === null)
            throw new Error("The parameter 'channelId' must be defined.");
        url_ = url_.replace("{channelId}", encodeURIComponent("" + channelId));
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUsers(_response);
        });
    }

    protected processUsers(response: AxiosResponse): Promise<PaginatedListOfChannelUserBriefDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PaginatedListOfChannelUserBriefDto.fromJS(resultData200);
            return Promise.resolve<PaginatedListOfChannelUserBriefDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PaginatedListOfChannelUserBriefDto>(<any>null);
    }

    addMember(command: AddUserToChannelCommand, channelId: string , cancelToken?: CancelToken | undefined): Promise<ChannelUserBriefDto> {
        let url_ = this.baseUrl + "/channels/{channelId}/users";
        if (channelId === undefined || channelId === null)
            throw new Error("The parameter 'channelId' must be defined.");
        url_ = url_.replace("{channelId}", encodeURIComponent("" + channelId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAddMember(_response);
        });
    }

    protected processAddMember(response: AxiosResponse): Promise<ChannelUserBriefDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ChannelUserBriefDto.fromJS(resultData200);
            return Promise.resolve<ChannelUserBriefDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ChannelUserBriefDto>(<any>null);
    }

    sendMessage(command: CreateMessageCommand, channelId: string , cancelToken?: CancelToken | undefined): Promise<MessageBriefDto> {
        let url_ = this.baseUrl + "/channels/{channelId}/messages";
        if (channelId === undefined || channelId === null)
            throw new Error("The parameter 'channelId' must be defined.");
        url_ = url_.replace("{channelId}", encodeURIComponent("" + channelId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSendMessage(_response);
        });
    }

    protected processSendMessage(response: AxiosResponse): Promise<MessageBriefDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MessageBriefDto.fromJS(resultData200);
            return Promise.resolve<MessageBriefDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MessageBriefDto>(<any>null);
    }
}

export interface IHookClient {
    kratosRegistrationHook(kratosUser: User): Promise<FileResponse>;
}

export class HookClient implements IHookClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    kratosRegistrationHook(kratosUser: User , cancelToken?: CancelToken | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/hook/kratos/registration";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(kratosUser);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processKratosRegistrationHook(_response);
        });
    }

    protected processKratosRegistrationHook(response: AxiosResponse): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(<any>null);
    }
}

export interface IUsersClient {
    list(user_Id?: string | undefined, user_Username?: string | null | undefined, user_Firstname?: string | null | undefined, user_Lastname?: string | null | undefined, workspaceId?: string | undefined, pageNumber?: number | undefined, pageSize?: number | undefined): Promise<PaginatedListOfUserBriefDto>;
}

export class UsersClient implements IUsersClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    list(user_Id?: string | undefined, user_Username?: string | null | undefined, user_Firstname?: string | null | undefined, user_Lastname?: string | null | undefined, workspaceId?: string | undefined, pageNumber?: number | undefined, pageSize?: number | undefined , cancelToken?: CancelToken | undefined): Promise<PaginatedListOfUserBriefDto> {
        let url_ = this.baseUrl + "/users?";
        if (user_Id === null)
            throw new Error("The parameter 'user_Id' cannot be null.");
        else if (user_Id !== undefined)
            url_ += "User.Id=" + encodeURIComponent("" + user_Id) + "&";
        if (user_Username !== undefined && user_Username !== null)
            url_ += "User.Username=" + encodeURIComponent("" + user_Username) + "&";
        if (user_Firstname !== undefined && user_Firstname !== null)
            url_ += "User.Firstname=" + encodeURIComponent("" + user_Firstname) + "&";
        if (user_Lastname !== undefined && user_Lastname !== null)
            url_ += "User.Lastname=" + encodeURIComponent("" + user_Lastname) + "&";
        if (workspaceId === null)
            throw new Error("The parameter 'workspaceId' cannot be null.");
        else if (workspaceId !== undefined)
            url_ += "WorkspaceId=" + encodeURIComponent("" + workspaceId) + "&";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processList(_response);
        });
    }

    protected processList(response: AxiosResponse): Promise<PaginatedListOfUserBriefDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PaginatedListOfUserBriefDto.fromJS(resultData200);
            return Promise.resolve<PaginatedListOfUserBriefDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PaginatedListOfUserBriefDto>(<any>null);
    }
}

export interface IWorkspacesClient {
    list(pageNumber?: number | undefined, pageSize?: number | undefined): Promise<PaginatedListOfWorkspaceBriefDto>;
    create(command: CreateWorkspaceCommand): Promise<WorkspaceBriefDto>;
}

export class WorkspacesClient implements IWorkspacesClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    list(pageNumber?: number | undefined, pageSize?: number | undefined , cancelToken?: CancelToken | undefined): Promise<PaginatedListOfWorkspaceBriefDto> {
        let url_ = this.baseUrl + "/workspaces?";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processList(_response);
        });
    }

    protected processList(response: AxiosResponse): Promise<PaginatedListOfWorkspaceBriefDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PaginatedListOfWorkspaceBriefDto.fromJS(resultData200);
            return Promise.resolve<PaginatedListOfWorkspaceBriefDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PaginatedListOfWorkspaceBriefDto>(<any>null);
    }

    create(command: CreateWorkspaceCommand , cancelToken?: CancelToken | undefined): Promise<WorkspaceBriefDto> {
        let url_ = this.baseUrl + "/workspaces";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: AxiosResponse): Promise<WorkspaceBriefDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = WorkspaceBriefDto.fromJS(resultData200);
            return Promise.resolve<WorkspaceBriefDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<WorkspaceBriefDto>(<any>null);
    }
}

export class BootDto implements IBootDto {
    messagePriorities?: IdNameDto[];
    messageReactions?: IdNameDto[];
    messageTypes?: IdNameDto[];

    constructor(data?: IBootDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.messagePriorities) {
                this.messagePriorities = [];
                for (let i = 0; i < data.messagePriorities.length; i++) {
                    let item = data.messagePriorities[i];
                    this.messagePriorities[i] = item && !(<any>item).toJSON ? new IdNameDto(item) : <IdNameDto>item;
                }
            }
            if (data.messageReactions) {
                this.messageReactions = [];
                for (let i = 0; i < data.messageReactions.length; i++) {
                    let item = data.messageReactions[i];
                    this.messageReactions[i] = item && !(<any>item).toJSON ? new IdNameDto(item) : <IdNameDto>item;
                }
            }
            if (data.messageTypes) {
                this.messageTypes = [];
                for (let i = 0; i < data.messageTypes.length; i++) {
                    let item = data.messageTypes[i];
                    this.messageTypes[i] = item && !(<any>item).toJSON ? new IdNameDto(item) : <IdNameDto>item;
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["messagePriorities"])) {
                this.messagePriorities = [] as any;
                for (let item of _data["messagePriorities"])
                    this.messagePriorities!.push(IdNameDto.fromJS(item));
            }
            if (Array.isArray(_data["messageReactions"])) {
                this.messageReactions = [] as any;
                for (let item of _data["messageReactions"])
                    this.messageReactions!.push(IdNameDto.fromJS(item));
            }
            if (Array.isArray(_data["messageTypes"])) {
                this.messageTypes = [] as any;
                for (let item of _data["messageTypes"])
                    this.messageTypes!.push(IdNameDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BootDto {
        data = typeof data === 'object' ? data : {};
        let result = new BootDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.messagePriorities)) {
            data["messagePriorities"] = [];
            for (let item of this.messagePriorities)
                data["messagePriorities"].push(item.toJSON());
        }
        if (Array.isArray(this.messageReactions)) {
            data["messageReactions"] = [];
            for (let item of this.messageReactions)
                data["messageReactions"].push(item.toJSON());
        }
        if (Array.isArray(this.messageTypes)) {
            data["messageTypes"] = [];
            for (let item of this.messageTypes)
                data["messageTypes"].push(item.toJSON());
        }
        return data;
    }
}

export interface IBootDto {
    messagePriorities?: IIdNameDto[];
    messageReactions?: IIdNameDto[];
    messageTypes?: IIdNameDto[];
}

export class IdNameDto implements IIdNameDto {
    id?: string;
    name?: string;

    constructor(data?: IIdNameDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): IdNameDto {
        data = typeof data === 'object' ? data : {};
        let result = new IdNameDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IIdNameDto {
    id?: string;
    name?: string;
}

export class ChannelBriefDto implements IChannelBriefDto {
    id?: string;
    name?: string;

    constructor(data?: IChannelBriefDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): ChannelBriefDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChannelBriefDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IChannelBriefDto {
    id?: string;
    name?: string;
}

export class BaseRequestOfChannelBriefDto implements IBaseRequestOfChannelBriefDto {
    user?: IUser;

    constructor(data?: IBaseRequestOfChannelBriefDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.user = data.user && !(<any>data.user).toJSON ? new IUser(data.user) : <IUser>this.user;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.user = _data["user"] ? IUser.fromJS(_data["user"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BaseRequestOfChannelBriefDto {
        data = typeof data === 'object' ? data : {};
        let result = new BaseRequestOfChannelBriefDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        return data;
    }
}

export interface IBaseRequestOfChannelBriefDto {
    user?: IIUser;
}

export class WorkspaceScopedRequestOfChannelBriefDto extends BaseRequestOfChannelBriefDto implements IWorkspaceScopedRequestOfChannelBriefDto {
    workspaceId?: string;

    constructor(data?: IWorkspaceScopedRequestOfChannelBriefDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.workspaceId = _data["workspaceId"];
        }
    }

    static fromJS(data: any): WorkspaceScopedRequestOfChannelBriefDto {
        data = typeof data === 'object' ? data : {};
        let result = new WorkspaceScopedRequestOfChannelBriefDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["workspaceId"] = this.workspaceId;
        super.toJSON(data);
        return data;
    }
}

export interface IWorkspaceScopedRequestOfChannelBriefDto extends IBaseRequestOfChannelBriefDto {
    workspaceId?: string;
}

export class CreateChannelCommand extends WorkspaceScopedRequestOfChannelBriefDto implements ICreateChannelCommand {
    name?: string;
    isPrivate?: boolean;

    constructor(data?: ICreateChannelCommand) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.name = _data["name"];
            this.isPrivate = _data["isPrivate"];
        }
    }

    static fromJS(data: any): CreateChannelCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateChannelCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["isPrivate"] = this.isPrivate;
        super.toJSON(data);
        return data;
    }
}

export interface ICreateChannelCommand extends IWorkspaceScopedRequestOfChannelBriefDto {
    name?: string;
    isPrivate?: boolean;
}

export abstract class IUser implements IIUser {
    id?: string;
    username?: string;
    firstname?: string;
    lastname?: string;

    constructor(data?: IIUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.username = _data["username"];
            this.firstname = _data["firstname"];
            this.lastname = _data["lastname"];
        }
    }

    static fromJS(data: any): IUser {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'IUser' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["username"] = this.username;
        data["firstname"] = this.firstname;
        data["lastname"] = this.lastname;
        return data;
    }
}

export interface IIUser {
    id?: string;
    username?: string;
    firstname?: string;
    lastname?: string;
}

export class PaginatedListOfChannelBriefDto implements IPaginatedListOfChannelBriefDto {
    items?: ChannelBriefDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfChannelBriefDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.items) {
                this.items = [];
                for (let i = 0; i < data.items.length; i++) {
                    let item = data.items[i];
                    this.items[i] = item && !(<any>item).toJSON ? new ChannelBriefDto(item) : <ChannelBriefDto>item;
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ChannelBriefDto.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfChannelBriefDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfChannelBriefDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfChannelBriefDto {
    items?: IChannelBriefDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class PaginatedListOfChannelUserBriefDto implements IPaginatedListOfChannelUserBriefDto {
    items?: ChannelUserBriefDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfChannelUserBriefDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.items) {
                this.items = [];
                for (let i = 0; i < data.items.length; i++) {
                    let item = data.items[i];
                    this.items[i] = item && !(<any>item).toJSON ? new ChannelUserBriefDto(item) : <ChannelUserBriefDto>item;
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ChannelUserBriefDto.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfChannelUserBriefDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfChannelUserBriefDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfChannelUserBriefDto {
    items?: IChannelUserBriefDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class ChannelUserBriefDto implements IChannelUserBriefDto {
    id?: string;
    userId?: string;
    channelId?: string;

    constructor(data?: IChannelUserBriefDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.channelId = _data["channelId"];
        }
    }

    static fromJS(data: any): ChannelUserBriefDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChannelUserBriefDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["channelId"] = this.channelId;
        return data;
    }
}

export interface IChannelUserBriefDto {
    id?: string;
    userId?: string;
    channelId?: string;
}

export class BaseRequestOfChannelUserBriefDto implements IBaseRequestOfChannelUserBriefDto {
    user?: IUser;

    constructor(data?: IBaseRequestOfChannelUserBriefDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.user = data.user && !(<any>data.user).toJSON ? new IUser(data.user) : <IUser>this.user;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.user = _data["user"] ? IUser.fromJS(_data["user"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BaseRequestOfChannelUserBriefDto {
        data = typeof data === 'object' ? data : {};
        let result = new BaseRequestOfChannelUserBriefDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        return data;
    }
}

export interface IBaseRequestOfChannelUserBriefDto {
    user?: IIUser;
}

export class WorkspaceScopedRequestOfChannelUserBriefDto extends BaseRequestOfChannelUserBriefDto implements IWorkspaceScopedRequestOfChannelUserBriefDto {
    workspaceId?: string;

    constructor(data?: IWorkspaceScopedRequestOfChannelUserBriefDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.workspaceId = _data["workspaceId"];
        }
    }

    static fromJS(data: any): WorkspaceScopedRequestOfChannelUserBriefDto {
        data = typeof data === 'object' ? data : {};
        let result = new WorkspaceScopedRequestOfChannelUserBriefDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["workspaceId"] = this.workspaceId;
        super.toJSON(data);
        return data;
    }
}

export interface IWorkspaceScopedRequestOfChannelUserBriefDto extends IBaseRequestOfChannelUserBriefDto {
    workspaceId?: string;
}

export class AddUserToChannelCommand extends WorkspaceScopedRequestOfChannelUserBriefDto implements IAddUserToChannelCommand {
    channelId?: string;
    userId?: string;

    constructor(data?: IAddUserToChannelCommand) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.channelId = _data["channelId"];
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): AddUserToChannelCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AddUserToChannelCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["channelId"] = this.channelId;
        data["userId"] = this.userId;
        super.toJSON(data);
        return data;
    }
}

export interface IAddUserToChannelCommand extends IWorkspaceScopedRequestOfChannelUserBriefDto {
    channelId?: string;
    userId?: string;
}

export class MessageBriefDto implements IMessageBriefDto {

    constructor(data?: IMessageBriefDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): MessageBriefDto {
        data = typeof data === 'object' ? data : {};
        let result = new MessageBriefDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IMessageBriefDto {
}

export class BaseRequestOfMessageBriefDto implements IBaseRequestOfMessageBriefDto {
    user?: IUser;

    constructor(data?: IBaseRequestOfMessageBriefDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.user = data.user && !(<any>data.user).toJSON ? new IUser(data.user) : <IUser>this.user;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.user = _data["user"] ? IUser.fromJS(_data["user"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BaseRequestOfMessageBriefDto {
        data = typeof data === 'object' ? data : {};
        let result = new BaseRequestOfMessageBriefDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        return data;
    }
}

export interface IBaseRequestOfMessageBriefDto {
    user?: IIUser;
}

export class WorkspaceScopedRequestOfMessageBriefDto extends BaseRequestOfMessageBriefDto implements IWorkspaceScopedRequestOfMessageBriefDto {
    workspaceId?: string;

    constructor(data?: IWorkspaceScopedRequestOfMessageBriefDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.workspaceId = _data["workspaceId"];
        }
    }

    static fromJS(data: any): WorkspaceScopedRequestOfMessageBriefDto {
        data = typeof data === 'object' ? data : {};
        let result = new WorkspaceScopedRequestOfMessageBriefDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["workspaceId"] = this.workspaceId;
        super.toJSON(data);
        return data;
    }
}

export interface IWorkspaceScopedRequestOfMessageBriefDto extends IBaseRequestOfMessageBriefDto {
    workspaceId?: string;
}

export class ChannelScopedRequestOfMessageBriefDto extends WorkspaceScopedRequestOfMessageBriefDto implements IChannelScopedRequestOfMessageBriefDto {
    channelId?: string;

    constructor(data?: IChannelScopedRequestOfMessageBriefDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.channelId = _data["channelId"];
        }
    }

    static fromJS(data: any): ChannelScopedRequestOfMessageBriefDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChannelScopedRequestOfMessageBriefDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["channelId"] = this.channelId;
        super.toJSON(data);
        return data;
    }
}

export interface IChannelScopedRequestOfMessageBriefDto extends IWorkspaceScopedRequestOfMessageBriefDto {
    channelId?: string;
}

export class CreateMessageCommand extends ChannelScopedRequestOfMessageBriefDto implements ICreateMessageCommand {
    body?: string;
    type?: string;
    priority?: string;
    expirationDate?: moment.Moment | undefined;

    constructor(data?: ICreateMessageCommand) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.body = _data["body"];
            this.type = _data["type"];
            this.priority = _data["priority"];
            this.expirationDate = _data["expirationDate"] ? moment(_data["expirationDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateMessageCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateMessageCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["body"] = this.body;
        data["type"] = this.type;
        data["priority"] = this.priority;
        data["expirationDate"] = this.expirationDate ? this.expirationDate.toISOString() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface ICreateMessageCommand extends IChannelScopedRequestOfMessageBriefDto {
    body?: string;
    type?: string;
    priority?: string;
    expirationDate?: moment.Moment | undefined;
}

export class User implements IUser {
    id?: string;
    username?: string;
    firstname?: string;
    lastname?: string;

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.username = _data["username"];
            this.firstname = _data["firstname"];
            this.lastname = _data["lastname"];
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["username"] = this.username;
        data["firstname"] = this.firstname;
        data["lastname"] = this.lastname;
        return data;
    }
}

export interface IUser {
    id?: string;
    username?: string;
    firstname?: string;
    lastname?: string;
}

export class PaginatedListOfUserBriefDto implements IPaginatedListOfUserBriefDto {
    items?: UserBriefDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfUserBriefDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.items) {
                this.items = [];
                for (let i = 0; i < data.items.length; i++) {
                    let item = data.items[i];
                    this.items[i] = item && !(<any>item).toJSON ? new UserBriefDto(item) : <UserBriefDto>item;
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(UserBriefDto.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfUserBriefDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfUserBriefDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfUserBriefDto {
    items?: IUserBriefDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class UserBriefDto implements IUserBriefDto {
    id?: string;
    username?: string;
    name?: string;

    constructor(data?: IUserBriefDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.username = _data["username"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): UserBriefDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserBriefDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["username"] = this.username;
        data["name"] = this.name;
        return data;
    }
}

export interface IUserBriefDto {
    id?: string;
    username?: string;
    name?: string;
}

export class PaginatedListOfWorkspaceBriefDto implements IPaginatedListOfWorkspaceBriefDto {
    items?: WorkspaceBriefDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfWorkspaceBriefDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.items) {
                this.items = [];
                for (let i = 0; i < data.items.length; i++) {
                    let item = data.items[i];
                    this.items[i] = item && !(<any>item).toJSON ? new WorkspaceBriefDto(item) : <WorkspaceBriefDto>item;
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(WorkspaceBriefDto.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfWorkspaceBriefDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfWorkspaceBriefDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfWorkspaceBriefDto {
    items?: IWorkspaceBriefDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class WorkspaceBriefDto implements IWorkspaceBriefDto {
    id?: string;
    name?: string;

    constructor(data?: IWorkspaceBriefDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): WorkspaceBriefDto {
        data = typeof data === 'object' ? data : {};
        let result = new WorkspaceBriefDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IWorkspaceBriefDto {
    id?: string;
    name?: string;
}

export class CreateWorkspaceCommand implements ICreateWorkspaceCommand {
    name?: string;

    constructor(data?: ICreateWorkspaceCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): CreateWorkspaceCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateWorkspaceCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }
}

export interface ICreateWorkspaceCommand {
    name?: string;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}