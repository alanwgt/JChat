// <auto-generated />
using System;
using JChat.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace JChat.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("JChat.Domain.Entities.Channel.Channel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid?>("DeletedById")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by_id");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean")
                        .HasColumnName("is_private");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modified_by_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("workspace_id");

                    b.HasKey("Id")
                        .HasName("pk_channels");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_channels_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_channels_deleted_by_id");

                    b.HasIndex("LastModifiedById")
                        .HasDatabaseName("ix_channels_last_modified_by_id");

                    b.HasIndex("WorkspaceId")
                        .HasDatabaseName("ix_channels_workspace_id");

                    b.HasIndex("Name", "WorkspaceId")
                        .IsUnique()
                        .HasDatabaseName("ix_channels_name_workspace_id");

                    b.ToTable("channels", (string)null);
                });

            modelBuilder.Entity("JChat.Domain.Entities.Channel.ChannelUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uuid")
                        .HasColumnName("channel_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean")
                        .HasColumnName("is_admin");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_channel_users");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_channel_users_user_id");

                    b.HasIndex("ChannelId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_channel_users_channel_id_user_id");

                    b.ToTable("channel_users", (string)null);
                });

            modelBuilder.Entity("JChat.Domain.Entities.Message.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid?>("DeletedById")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration_date");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modified_by_id");

                    b.Property<Guid>("MessagePriorityId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_priority_id");

                    b.Property<Guid>("MessageTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_type_id");

                    b.Property<string>("Meta")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("meta");

                    b.Property<Guid?>("ReplyingToId")
                        .HasColumnType("uuid")
                        .HasColumnName("replying_to_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_messages");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_messages_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_messages_deleted_by_id");

                    b.HasIndex("LastModifiedById")
                        .HasDatabaseName("ix_messages_last_modified_by_id");

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("JChat.Domain.Entities.Message.MessageBodyType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<short>("BodyType")
                        .HasColumnType("smallint")
                        .HasColumnName("body_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_message_body_types");

                    b.ToTable("message_body_types", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d79fc8df-fda7-4ec5-b83e-dc4b05853df2"),
                            BodyType = (short)1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "message.type.audio"
                        },
                        new
                        {
                            Id = new Guid("3eb4f953-c45f-4076-b9e7-ecc3484b89d3"),
                            BodyType = (short)4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "message.type.gif"
                        },
                        new
                        {
                            Id = new Guid("e01c901d-3beb-49a2-8625-2e3d51bbc127"),
                            BodyType = (short)2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "message.type.image"
                        },
                        new
                        {
                            Id = new Guid("b6db22e2-bd19-41b0-8b8d-c5ce3f1cf1e0"),
                            BodyType = (short)0,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "message.type.text"
                        },
                        new
                        {
                            Id = new Guid("319f34b9-af34-447d-bb6a-cab9143fa96b"),
                            BodyType = (short)3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "message.type.video"
                        });
                });

            modelBuilder.Entity("JChat.Domain.Entities.Message.MessageHighlight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid?>("DeletedById")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by_id");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modified_by_id");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_message_highlights");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_message_highlights_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_message_highlights_deleted_by_id");

                    b.HasIndex("LastModifiedById")
                        .HasDatabaseName("ix_message_highlights_last_modified_by_id");

                    b.ToTable("message_highlights", (string)null);
                });

            modelBuilder.Entity("JChat.Domain.Entities.Message.MessagePriority", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<short>("Priority")
                        .HasColumnType("smallint")
                        .HasColumnName("priority");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_message_priorities");

                    b.ToTable("message_priorities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b33c075f-f5d3-4ee4-8cc2-0248d8ec1d1e"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "message.priority.normal",
                            Priority = (short)0
                        },
                        new
                        {
                            Id = new Guid("19b2180a-ed00-4bad-9fe2-fb3c09119303"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "message.priority.snooze",
                            Priority = (short)50
                        },
                        new
                        {
                            Id = new Guid("d05c7d68-0413-493b-ac1d-70c26a0a0b0c"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "message.priority.requires_confirmation",
                            Priority = (short)100
                        },
                        new
                        {
                            Id = new Guid("47ed3f27-b5ad-4570-b0a2-70551231010e"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "message.priority.requires_confirmation_snooze",
                            Priority = (short)128
                        });
                });

            modelBuilder.Entity("JChat.Domain.Entities.Message.MessageProjection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<int>("BodyType")
                        .HasColumnType("integer")
                        .HasColumnName("body_type");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uuid")
                        .HasColumnName("channel_id");

                    b.Property<DateTime?>("ConfirmedVisualizationAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("confirmed_visualization_at");

                    b.Property<Guid?>("ForwardedById")
                        .HasColumnType("uuid")
                        .HasColumnName("forwarded_by_id");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_id");

                    b.Property<string>("Meta")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("meta");

                    b.Property<Guid>("PriorityId")
                        .HasColumnType("uuid")
                        .HasColumnName("priority_id");

                    b.Property<string>("Reactions")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("reactions");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("read_at");

                    b.Property<DateTime?>("ReceivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("received_at");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uuid")
                        .HasColumnName("recipient_id");

                    b.Property<Guid?>("ReplyingToId")
                        .HasColumnType("uuid")
                        .HasColumnName("replying_to_id");

                    b.HasKey("Id")
                        .HasName("pk_message_projections");

                    b.HasIndex("ForwardedById")
                        .HasDatabaseName("ix_message_projections_forwarded_by_id");

                    b.HasIndex("MessageId")
                        .HasDatabaseName("ix_message_projections_message_id");

                    b.HasIndex("PriorityId")
                        .HasDatabaseName("ix_message_projections_priority_id");

                    b.HasIndex("RecipientId")
                        .HasDatabaseName("ix_message_projections_recipient_id");

                    b.HasIndex("ReplyingToId")
                        .HasDatabaseName("ix_message_projections_replying_to_id");

                    b.HasIndex("ChannelId", "RecipientId")
                        .HasDatabaseName("ix_message_projections_channel_id_recipient_id");

                    b.ToTable("message_projections", (string)null);
                });

            modelBuilder.Entity("JChat.Domain.Entities.Message.MessageReaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid?>("DeletedById")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by_id");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modified_by_id");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_id");

                    b.Property<Guid>("ReactionId")
                        .HasColumnType("uuid")
                        .HasColumnName("reaction_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_message_reactions");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_message_reactions_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_message_reactions_deleted_by_id");

                    b.HasIndex("LastModifiedById")
                        .HasDatabaseName("ix_message_reactions_last_modified_by_id");

                    b.HasIndex("MessageId")
                        .HasDatabaseName("ix_message_reactions_message_id");

                    b.ToTable("message_reactions", (string)null);
                });

            modelBuilder.Entity("JChat.Domain.Entities.Message.MessageRecipient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uuid")
                        .HasColumnName("channel_id");

                    b.Property<DateTime?>("ConfirmedVisualizationAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("confirmed_visualization_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid?>("DeletedById")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by_id");

                    b.Property<Guid?>("ForwardedById")
                        .HasColumnType("uuid")
                        .HasColumnName("forwarded_by_id");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modified_by_id");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_id");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("read_at");

                    b.Property<DateTime?>("ReceivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("received_at");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uuid")
                        .HasColumnName("recipient_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_message_recipients");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_message_recipients_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_message_recipients_deleted_by_id");

                    b.HasIndex("ForwardedById")
                        .HasDatabaseName("ix_message_recipients_forwarded_by_id");

                    b.HasIndex("LastModifiedById")
                        .HasDatabaseName("ix_message_recipients_last_modified_by_id");

                    b.HasIndex("MessageId")
                        .HasDatabaseName("ix_message_recipients_message_id");

                    b.ToTable("message_recipients", (string)null);
                });

            modelBuilder.Entity("JChat.Domain.Entities.Message.Reaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("char(9)")
                        .HasColumnName("color");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("icon");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_reactions");

                    b.ToTable("reactions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("08f5332a-bf09-4432-a704-c3ce1d19ff06"),
                            Color = "1A85BA",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "thumbs-up",
                            Name = "reaction.like"
                        },
                        new
                        {
                            Id = new Guid("23615f68-f0fb-43d6-ae1f-29c208f81ef1"),
                            Color = "6EAD51",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "celebrate",
                            Name = "reaction.celebrate"
                        },
                        new
                        {
                            Id = new Guid("910ce222-b526-46e4-a7c9-6bf73bd9861a"),
                            Color = "DA7150",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "love",
                            Name = "reaction.love"
                        },
                        new
                        {
                            Id = new Guid("61bb08a5-de68-4b84-8450-a99ba5a796b4"),
                            Color = "F0B85F",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "insightful",
                            Name = "reaction.insightful"
                        },
                        new
                        {
                            Id = new Guid("028bc8f7-00d0-4ba4-8ec6-5adab2e39351"),
                            Color = "DCB9DA",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "curious",
                            Name = "reaction.curious"
                        },
                        new
                        {
                            Id = new Guid("fcb06e77-80eb-4f8e-9ef0-cd715e488fff"),
                            Color = "CE5044",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "rocket",
                            Name = "reaction.rocket"
                        },
                        new
                        {
                            Id = new Guid("da361619-dca3-4835-8d8a-00487f031bc6"),
                            Color = "FFFFFF",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "eyes",
                            Name = "reaction.eyes"
                        });
                });

            modelBuilder.Entity("JChat.Domain.Entities.User.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("firstname");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("lastname");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("JChat.Domain.Entities.User.UserWorkspace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("AcceptedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("accepted_at");

                    b.Property<bool>("Admin")
                        .HasColumnType("boolean")
                        .HasColumnName("admin");

                    b.Property<Guid?>("BanishedById")
                        .HasColumnType("uuid")
                        .HasColumnName("banished_by_id");

                    b.Property<string>("BanishmentReason")
                        .HasColumnType("text")
                        .HasColumnName("banishment_reason");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid?>("DeletedById")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by_id");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modified_by_id");

                    b.Property<DateTime?>("RejectedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("rejected_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("workspace_id");

                    b.HasKey("Id")
                        .HasName("pk_user_workspaces");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_user_workspaces_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_user_workspaces_deleted_by_id");

                    b.HasIndex("LastModifiedById")
                        .HasDatabaseName("ix_user_workspaces_last_modified_by_id");

                    b.HasIndex("WorkspaceId")
                        .HasDatabaseName("ix_user_workspaces_workspace_id");

                    b.HasIndex("UserId", "WorkspaceId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_workspaces_user_id_workspace_id");

                    b.ToTable("user_workspaces", (string)null);
                });

            modelBuilder.Entity("JChat.Domain.Entities.Workspace.Workspace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid?>("DeletedById")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by_id");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modified_by_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_workspaces");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_workspaces_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_workspaces_deleted_by_id");

                    b.HasIndex("LastModifiedById")
                        .HasDatabaseName("ix_workspaces_last_modified_by_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_workspaces_name");

                    b.ToTable("workspaces", (string)null);
                });

            modelBuilder.Entity("JChat.Domain.Entities.Channel.Channel", b =>
                {
                    b.HasOne("JChat.Domain.Entities.User.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_channels_users_created_by_id");

                    b.HasOne("JChat.Domain.Entities.User.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_channels_users_deleted_by_id");

                    b.HasOne("JChat.Domain.Entities.User.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .HasConstraintName("fk_channels_users_last_modified_by_id");

                    b.HasOne("JChat.Domain.Entities.Workspace.Workspace", "Workspace")
                        .WithMany("Channels")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_channels_workspaces_workspace_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("JChat.Domain.Entities.Channel.ChannelUser", b =>
                {
                    b.HasOne("JChat.Domain.Entities.Channel.Channel", null)
                        .WithMany("Users")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_channel_users_channels_channel_id");

                    b.HasOne("JChat.Domain.Entities.User.User", null)
                        .WithMany("Channels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_channel_users_users_user_id");
                });

            modelBuilder.Entity("JChat.Domain.Entities.Message.Message", b =>
                {
                    b.HasOne("JChat.Domain.Entities.User.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_messages_users_created_by_id");

                    b.HasOne("JChat.Domain.Entities.User.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_messages_users_deleted_by_id");

                    b.HasOne("JChat.Domain.Entities.User.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .HasConstraintName("fk_messages_users_last_modified_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("JChat.Domain.Entities.Message.MessageHighlight", b =>
                {
                    b.HasOne("JChat.Domain.Entities.User.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_message_highlights_users_created_by_id");

                    b.HasOne("JChat.Domain.Entities.User.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_message_highlights_users_deleted_by_id");

                    b.HasOne("JChat.Domain.Entities.User.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .HasConstraintName("fk_message_highlights_users_last_modified_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("JChat.Domain.Entities.Message.MessageProjection", b =>
                {
                    b.HasOne("JChat.Domain.Entities.Channel.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_message_projections_channels_channel_id");

                    b.HasOne("JChat.Domain.Entities.User.User", "ForwardedBy")
                        .WithMany()
                        .HasForeignKey("ForwardedById")
                        .HasConstraintName("fk_message_projections_users_forwarded_by_id");

                    b.HasOne("JChat.Domain.Entities.Message.Message", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_message_projections_messages_message_id");

                    b.HasOne("JChat.Domain.Entities.Message.MessagePriority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_message_projections_message_priorities_priority_id");

                    b.HasOne("JChat.Domain.Entities.User.User", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_message_projections_users_recipient_id");

                    b.HasOne("JChat.Domain.Entities.Message.Message", "ReplyingTo")
                        .WithMany()
                        .HasForeignKey("ReplyingToId")
                        .HasConstraintName("fk_message_projections_messages_replying_to_id");

                    b.Navigation("Channel");

                    b.Navigation("ForwardedBy");

                    b.Navigation("Message");

                    b.Navigation("Priority");

                    b.Navigation("Recipient");

                    b.Navigation("ReplyingTo");
                });

            modelBuilder.Entity("JChat.Domain.Entities.Message.MessageReaction", b =>
                {
                    b.HasOne("JChat.Domain.Entities.User.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_message_reactions_users_created_by_id");

                    b.HasOne("JChat.Domain.Entities.User.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_message_reactions_users_deleted_by_id");

                    b.HasOne("JChat.Domain.Entities.User.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .HasConstraintName("fk_message_reactions_users_last_modified_by_id");

                    b.HasOne("JChat.Domain.Entities.Message.Message", null)
                        .WithMany("Reactions")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_message_reactions_messages_message_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("JChat.Domain.Entities.Message.MessageRecipient", b =>
                {
                    b.HasOne("JChat.Domain.Entities.User.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_message_recipients_users_created_by_id");

                    b.HasOne("JChat.Domain.Entities.User.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_message_recipients_users_deleted_by_id");

                    b.HasOne("JChat.Domain.Entities.Message.MessageRecipient", "ForwardedBy")
                        .WithMany()
                        .HasForeignKey("ForwardedById")
                        .HasConstraintName("fk_message_recipients_message_recipients_forwarded_by_id");

                    b.HasOne("JChat.Domain.Entities.User.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .HasConstraintName("fk_message_recipients_users_last_modified_by_id");

                    b.HasOne("JChat.Domain.Entities.Message.Message", null)
                        .WithMany("Recipients")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_message_recipients_messages_message_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ForwardedBy");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("JChat.Domain.Entities.User.UserWorkspace", b =>
                {
                    b.HasOne("JChat.Domain.Entities.User.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_user_workspaces_users_created_by_id");

                    b.HasOne("JChat.Domain.Entities.User.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_user_workspaces_users_deleted_by_id");

                    b.HasOne("JChat.Domain.Entities.User.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .HasConstraintName("fk_user_workspaces_users_last_modified_by_id");

                    b.HasOne("JChat.Domain.Entities.User.User", "User")
                        .WithMany("UserWorkspaces")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_workspaces_users_user_id");

                    b.HasOne("JChat.Domain.Entities.Workspace.Workspace", "Workspace")
                        .WithMany("UserWorkspaces")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_workspaces_workspaces_workspace_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("User");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("JChat.Domain.Entities.Workspace.Workspace", b =>
                {
                    b.HasOne("JChat.Domain.Entities.User.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_workspaces_users_created_by_id");

                    b.HasOne("JChat.Domain.Entities.User.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_workspaces_users_deleted_by_id");

                    b.HasOne("JChat.Domain.Entities.User.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .HasConstraintName("fk_workspaces_users_last_modified_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("JChat.Domain.Entities.Channel.Channel", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("JChat.Domain.Entities.Message.Message", b =>
                {
                    b.Navigation("Reactions");

                    b.Navigation("Recipients");
                });

            modelBuilder.Entity("JChat.Domain.Entities.User.User", b =>
                {
                    b.Navigation("Channels");

                    b.Navigation("UserWorkspaces");
                });

            modelBuilder.Entity("JChat.Domain.Entities.Workspace.Workspace", b =>
                {
                    b.Navigation("Channels");

                    b.Navigation("UserWorkspaces");
                });
#pragma warning restore 612, 618
        }
    }
}
