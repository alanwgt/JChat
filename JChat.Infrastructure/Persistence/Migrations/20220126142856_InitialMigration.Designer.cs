// <auto-generated />
using System;
using JChat.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace JChat.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220126142856_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("JChat.Domain.Entities.Channel.Channel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid?>("DeletedById")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by_id");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean")
                        .HasColumnName("is_private");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modified_by_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("workspace_id");

                    b.HasKey("Id")
                        .HasName("pk_channels");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_channels_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_channels_deleted_by_id");

                    b.HasIndex("LastModifiedById")
                        .HasDatabaseName("ix_channels_last_modified_by_id");

                    b.HasIndex("WorkspaceId")
                        .HasDatabaseName("ix_channels_workspace_id");

                    b.HasIndex("Name", "WorkspaceId")
                        .IsUnique()
                        .HasDatabaseName("ix_channels_name_workspace_id");

                    b.ToTable("channels", (string)null);
                });

            modelBuilder.Entity("JChat.Domain.Entities.Channel.ChannelUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uuid")
                        .HasColumnName("channel_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean")
                        .HasColumnName("is_admin");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_channel_users");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_channel_users_user_id");

                    b.HasIndex("ChannelId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_channel_users_channel_id_user_id");

                    b.ToTable("channel_users", (string)null);
                });

            modelBuilder.Entity("JChat.Domain.Entities.Message.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid?>("DeletedById")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration_date");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modified_by_id");

                    b.Property<Guid>("MessagePriorityId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_priority_id");

                    b.Property<Guid>("MessageTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_type_id");

                    b.Property<string>("Meta")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("meta");

                    b.Property<Guid?>("ReplyingToId")
                        .HasColumnType("uuid")
                        .HasColumnName("replying_to_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_messages");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_messages_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_messages_deleted_by_id");

                    b.HasIndex("LastModifiedById")
                        .HasDatabaseName("ix_messages_last_modified_by_id");

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("JChat.Domain.Entities.Message.MessageHighlight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid?>("DeletedById")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by_id");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modified_by_id");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_message_highlights");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_message_highlights_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_message_highlights_deleted_by_id");

                    b.HasIndex("LastModifiedById")
                        .HasDatabaseName("ix_message_highlights_last_modified_by_id");

                    b.ToTable("message_highlights", (string)null);
                });

            modelBuilder.Entity("JChat.Domain.Entities.Message.MessagePriority", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<short>("Priority")
                        .HasColumnType("smallint")
                        .HasColumnName("priority");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_message_priorities");

                    b.ToTable("message_priorities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("633f5c7a-d1b6-4b9f-8bf7-2dbe53ce9922"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "message.priority.normal",
                            Priority = (short)0
                        },
                        new
                        {
                            Id = new Guid("b01b3ea0-e48f-4a3e-aad9-d3b26cfdedad"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "message.priority.snooze",
                            Priority = (short)50
                        },
                        new
                        {
                            Id = new Guid("2f0d6895-2f60-43d2-82a6-3e5d361ab1de"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "message.priority.requires_confirmation",
                            Priority = (short)100
                        },
                        new
                        {
                            Id = new Guid("17b04c0f-58f3-48ba-901f-0c8266469d3f"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "message.priority.requires_confirmation_snooze",
                            Priority = (short)128
                        });
                });

            modelBuilder.Entity("JChat.Domain.Entities.Message.MessageReaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid?>("DeletedById")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by_id");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modified_by_id");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_id");

                    b.Property<Guid>("ReactionId")
                        .HasColumnType("uuid")
                        .HasColumnName("reaction_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_message_reactions");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_message_reactions_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_message_reactions_deleted_by_id");

                    b.HasIndex("LastModifiedById")
                        .HasDatabaseName("ix_message_reactions_last_modified_by_id");

                    b.HasIndex("MessageId")
                        .HasDatabaseName("ix_message_reactions_message_id");

                    b.ToTable("message_reactions", (string)null);
                });

            modelBuilder.Entity("JChat.Domain.Entities.Message.MessageRecipient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uuid")
                        .HasColumnName("channel_id");

                    b.Property<DateTime?>("ConfirmedVisualizationAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("confirmed_visualization_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid?>("DeletedById")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by_id");

                    b.Property<Guid?>("ForwardedById")
                        .HasColumnType("uuid")
                        .HasColumnName("forwarded_by_id");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modified_by_id");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_id");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("read_at");

                    b.Property<DateTime?>("ReceivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("received_at");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uuid")
                        .HasColumnName("recipient_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_message_recipients");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_message_recipients_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_message_recipients_deleted_by_id");

                    b.HasIndex("ForwardedById")
                        .HasDatabaseName("ix_message_recipients_forwarded_by_id");

                    b.HasIndex("LastModifiedById")
                        .HasDatabaseName("ix_message_recipients_last_modified_by_id");

                    b.ToTable("message_recipients", (string)null);
                });

            modelBuilder.Entity("JChat.Domain.Entities.Message.MessageType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_message_types");

                    b.ToTable("message_types", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0ef0564b-7b4a-49fb-92c7-7ab14067716b"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "message.type.audio"
                        },
                        new
                        {
                            Id = new Guid("5ddb5056-ddf4-4b1b-9cc0-3a7f232b8148"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "message.type.gif"
                        },
                        new
                        {
                            Id = new Guid("90f23ea7-ddcc-423e-ad40-a37bc9c8bc80"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "message.type.image"
                        },
                        new
                        {
                            Id = new Guid("65cab42b-3ff7-4f13-b90f-91abaa8228f1"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "message.type.text"
                        },
                        new
                        {
                            Id = new Guid("001dbae7-c0d5-43bc-8ce8-2d0e0ec2c54d"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "message.type.video"
                        });
                });

            modelBuilder.Entity("JChat.Domain.Entities.Message.Reaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("char(9)")
                        .HasColumnName("color");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("icon");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_reactions");

                    b.ToTable("reactions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ec025488-93e2-42a8-927c-7cb586bb3301"),
                            Color = "1A85BA",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "thumbs-up",
                            Name = "reaction.like"
                        },
                        new
                        {
                            Id = new Guid("5cc8585c-c6de-49fc-b15b-614d2b3988c1"),
                            Color = "6EAD51",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "celebrate",
                            Name = "reaction.celebrate"
                        },
                        new
                        {
                            Id = new Guid("c05b0de3-541e-4cdb-bcbb-b9f3aaef0187"),
                            Color = "DA7150",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "love",
                            Name = "reaction.love"
                        },
                        new
                        {
                            Id = new Guid("9514777c-4d6a-4c93-8a85-489405a7828a"),
                            Color = "F0B85F",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "insightful",
                            Name = "reaction.insightful"
                        },
                        new
                        {
                            Id = new Guid("4abe01ae-55ce-4976-be42-29069dc74b68"),
                            Color = "DCB9DA",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "curious",
                            Name = "reaction.curious"
                        },
                        new
                        {
                            Id = new Guid("843c64cb-c38a-431f-93a5-096655efca0a"),
                            Color = "CE5044",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "rocket",
                            Name = "reaction.rocket"
                        },
                        new
                        {
                            Id = new Guid("cca15e67-9ee5-47ea-bcfa-15061d97f70f"),
                            Color = "FFFFFF",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "eyes",
                            Name = "reaction.eyes"
                        });
                });

            modelBuilder.Entity("JChat.Domain.Entities.User.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("firstname");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("lastname");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("JChat.Domain.Entities.User.UserWorkspace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("AcceptedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("accepted_at");

                    b.Property<bool>("Admin")
                        .HasColumnType("boolean")
                        .HasColumnName("admin");

                    b.Property<Guid?>("BanishedById")
                        .HasColumnType("uuid")
                        .HasColumnName("banished_by_id");

                    b.Property<string>("BanishmentReason")
                        .HasColumnType("text")
                        .HasColumnName("banishment_reason");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid?>("DeletedById")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by_id");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modified_by_id");

                    b.Property<DateTime?>("RejectedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("rejected_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("workspace_id");

                    b.HasKey("Id")
                        .HasName("pk_user_workspaces");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_user_workspaces_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_user_workspaces_deleted_by_id");

                    b.HasIndex("LastModifiedById")
                        .HasDatabaseName("ix_user_workspaces_last_modified_by_id");

                    b.HasIndex("WorkspaceId")
                        .HasDatabaseName("ix_user_workspaces_workspace_id");

                    b.HasIndex("UserId", "WorkspaceId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_workspaces_user_id_workspace_id");

                    b.ToTable("user_workspaces", (string)null);
                });

            modelBuilder.Entity("JChat.Domain.Entities.Workspace.Workspace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid?>("DeletedById")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by_id");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modified_by_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_workspaces");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_workspaces_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_workspaces_deleted_by_id");

                    b.HasIndex("LastModifiedById")
                        .HasDatabaseName("ix_workspaces_last_modified_by_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_workspaces_name");

                    b.ToTable("workspaces", (string)null);
                });

            modelBuilder.Entity("JChat.Domain.Entities.Channel.Channel", b =>
                {
                    b.HasOne("JChat.Domain.Entities.User.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_channels_users_created_by_id");

                    b.HasOne("JChat.Domain.Entities.User.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_channels_users_deleted_by_id");

                    b.HasOne("JChat.Domain.Entities.User.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .HasConstraintName("fk_channels_users_last_modified_by_id");

                    b.HasOne("JChat.Domain.Entities.Workspace.Workspace", "Workspace")
                        .WithMany("Channels")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_channels_workspaces_workspace_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("JChat.Domain.Entities.Channel.ChannelUser", b =>
                {
                    b.HasOne("JChat.Domain.Entities.Channel.Channel", null)
                        .WithMany("Users")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_channel_users_channels_channel_id");

                    b.HasOne("JChat.Domain.Entities.User.User", null)
                        .WithMany("Channels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_channel_users_users_user_id");
                });

            modelBuilder.Entity("JChat.Domain.Entities.Message.Message", b =>
                {
                    b.HasOne("JChat.Domain.Entities.User.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_messages_users_created_by_id");

                    b.HasOne("JChat.Domain.Entities.User.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_messages_users_deleted_by_id");

                    b.HasOne("JChat.Domain.Entities.User.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .HasConstraintName("fk_messages_users_last_modified_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("JChat.Domain.Entities.Message.MessageHighlight", b =>
                {
                    b.HasOne("JChat.Domain.Entities.User.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_message_highlights_users_created_by_id");

                    b.HasOne("JChat.Domain.Entities.User.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_message_highlights_users_deleted_by_id");

                    b.HasOne("JChat.Domain.Entities.User.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .HasConstraintName("fk_message_highlights_users_last_modified_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("JChat.Domain.Entities.Message.MessageReaction", b =>
                {
                    b.HasOne("JChat.Domain.Entities.User.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_message_reactions_users_created_by_id");

                    b.HasOne("JChat.Domain.Entities.User.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_message_reactions_users_deleted_by_id");

                    b.HasOne("JChat.Domain.Entities.User.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .HasConstraintName("fk_message_reactions_users_last_modified_by_id");

                    b.HasOne("JChat.Domain.Entities.Message.Message", null)
                        .WithMany("Reactions")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_message_reactions_messages_message_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("JChat.Domain.Entities.Message.MessageRecipient", b =>
                {
                    b.HasOne("JChat.Domain.Entities.User.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_message_recipients_users_created_by_id");

                    b.HasOne("JChat.Domain.Entities.User.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_message_recipients_users_deleted_by_id");

                    b.HasOne("JChat.Domain.Entities.Message.MessageRecipient", "ForwardedBy")
                        .WithMany()
                        .HasForeignKey("ForwardedById")
                        .HasConstraintName("fk_message_recipients_message_recipients_forwarded_by_id");

                    b.HasOne("JChat.Domain.Entities.User.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .HasConstraintName("fk_message_recipients_users_last_modified_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ForwardedBy");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("JChat.Domain.Entities.User.UserWorkspace", b =>
                {
                    b.HasOne("JChat.Domain.Entities.User.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_user_workspaces_users_created_by_id");

                    b.HasOne("JChat.Domain.Entities.User.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_user_workspaces_users_deleted_by_id");

                    b.HasOne("JChat.Domain.Entities.User.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .HasConstraintName("fk_user_workspaces_users_last_modified_by_id");

                    b.HasOne("JChat.Domain.Entities.User.User", "User")
                        .WithMany("UserWorkspaces")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_workspaces_users_user_id");

                    b.HasOne("JChat.Domain.Entities.Workspace.Workspace", "Workspace")
                        .WithMany("UserWorkspaces")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_workspaces_workspaces_workspace_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("User");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("JChat.Domain.Entities.Workspace.Workspace", b =>
                {
                    b.HasOne("JChat.Domain.Entities.User.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_workspaces_users_created_by_id");

                    b.HasOne("JChat.Domain.Entities.User.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_workspaces_users_deleted_by_id");

                    b.HasOne("JChat.Domain.Entities.User.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .HasConstraintName("fk_workspaces_users_last_modified_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("JChat.Domain.Entities.Channel.Channel", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("JChat.Domain.Entities.Message.Message", b =>
                {
                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("JChat.Domain.Entities.User.User", b =>
                {
                    b.Navigation("Channels");

                    b.Navigation("UserWorkspaces");
                });

            modelBuilder.Entity("JChat.Domain.Entities.Workspace.Workspace", b =>
                {
                    b.Navigation("Channels");

                    b.Navigation("UserWorkspaces");
                });
#pragma warning restore 612, 618
        }
    }
}
